<%= render 'shared/refresh_upon_going_back' %>

<div id="login-signup-form">
  <div class="content">
    <%= render partial: 'shared/tab_group', locals: { active_class: 'signup--active' } %>
    <%= login_signup_card(
          header:       (I18n.t(:"educator_profile_form.complete_page_header")),
          current_step: I18n.t(:"login_signup_form.step_counter", current_step: 4, total_steps: 4),
          classes:      'signup-page completed-step') do %>
      <% lev_form_for :signup, url: complete_profile_post_path do |f| %>
        <% fh = FormHelper::One.new(f:       f,
                                    context: self,
                                    errors:  @handler_result&.errors) %>

        <div class="content required-fields-notice">
          <%= I18n.t(:"login_signup_form.all_fields_required") %>
        </div>

        <div class="content">
          <div class="questions">
            <%= render partial: 'educator_signup/school_name' %>
            <%= render partial: 'educator_signup/completed_role', locals: { fh: fh } %>
            <%= render partial: 'educator_signup/how_chosen' %>
            <%= render partial: 'educator_signup/how_using' %>
            <%= render partial: 'educator_signup/book_selector' %>
            <%= render partial: 'educator_signup/student_number', locals: { fh: fh } %>

          </div>

          <%= f.hidden_field :is_school_not_supported_by_sheerid, value: params[:school].present? || @current_incomplete_educator&.rejected_faculty? %>
          <%= f.hidden_field :is_country_not_supported_by_sheerid, value: params[:country].present? || @current_incomplete_educator&.rejected_faculty? %>

          <input type="submit" name="commit" value="Continue"
                 class="primary"
                 data-disable-with="<%= I18n.t(:"login_signup_form.continue_button") %>"
                 data-ga-category="Account Creation"
                 data-ga-action="Click"
                 data-ga-label="3A-Email"
                 data-bind="click: beforeSubmit"
          >
        </div>
      <% end %>
    <% end %>
  </div>
</div>

<script type="text/javascript">
    //this needs to be done at bottom of the file so that the dom above is already constructed
    // Using Knockout
    function studentsPerBook(books) {
        const dict = {};

        books.subscribe((arr) => {
            for (const b of arr.map((obj) => obj.value)) {
                if (!(b in dict)) {
                    const v = ko.observable();

                    v.invalid = ko.computed(() => {
                        const bookValues = books().map((obj) => obj.value);

                        v(); // Ensure evaluation; short circuit && will skip
                        return bookValues.includes(b) && !v();
                    });
                    dict[b] = v;
                }
            }
        });

        return dict;
    }

    function beforeSubmit(data) {
        data.hasBeenSubmitted(true);
        if (data.schoolNameNoticeVisible() || data.roleNoticeVisible()) {
            return false;
        }
        if (data.showChosenAndUsingSections() && (
            data.chosenNoticeVisible() || data.usingNoticeVisible() ||
            data.minBooksNoticeVisible() ||
            Reflect.ownKeys(data.studentCounts).some(
                (key) => data.studentCounts[key] === 'object' && data.studentCounts[key].invalid()
            )
        )) {
            return false;
        }
        // return true to allow default action
        return true;
    }

    const vm = function () {
        const schoolName = ko.observable('');
        const role = ko.observable();
        const hasBeenSubmitted = ko.observable(false);
        const schoolNameIsVisible = <%= should_show_school_name_field? %>;
        const schoolNameNoticeVisible = ko.computed(
            function () {
                return Boolean(schoolNameIsVisible && role() && !schoolName());
            }
        );
        const roleNoticeVisible = ko.computed(
            function () {
                return hasBeenSubmitted() && !role();
            }
        );
        const otherRole = ko.observable();
        const otherNoticeVisible = ko.computed(
            function () {
                return hasBeenSubmitted() && role() === 'other' && !otherRole();
            }
        )
        const showChosenAndUsingSections = ko.computed(
            function () {
                return ['instructor', 'administrator'].includes(role());
            }
        );
        const howChosen = ko.observable();
        const chosenNoticeVisible = ko.computed(
            function () {
                return hasBeenSubmitted() && !howChosen();
            }
        );
        const howUsing = ko.observable();
        const usingNoticeVisible = ko.computed(
            function () {
                return hasBeenSubmitted() && !howUsing();
            }
        );
        const selectedBooks = ko.observable([]);
        const maxBooksNoticeVisible = ko.computed(() => selectedBooks().length >= 5);
        const minBooksNoticeVisible = ko.computed(() => hasBeenSubmitted() && selectedBooks().length < 1);
        const bookSelectorName = ko.computed(
            () => (
                {
                    as_primary: 'signup[<%= :books_used %>][]',
                    as_recommending: 'signup[<%= :books_of_interest %>][]',
                    as_future: 'signup[<%= :books_of_interest %>][]'
                }[howUsing()]
            )
        );
        const bookSelectorLabel = ko.computed(
            () => (
                {
                    as_primary: '<%= I18n.t(:"educator_profile_form.books_used") %>',
                    as_recommending: '<%= I18n.t(:"educator_profile_form.books_of_interest") %>',
                    as_future: '<%= I18n.t(:"educator_profile_form.books_of_interest") %>'
                }[howUsing()]
            )
        );
        const studentCounts = studentsPerBook(selectedBooks);

        return {
            schoolName, role, schoolNameNoticeVisible, roleNoticeVisible,
            otherRole, otherNoticeVisible,
            showChosenAndUsingSections, howChosen, chosenNoticeVisible,
            howUsing, usingNoticeVisible,
            selectedBooks, maxBooksNoticeVisible, minBooksNoticeVisible,
            bookSelectorName, bookSelectorLabel, studentCounts, hasBeenSubmitted,
            beforeSubmit
        }
    };

    ko.applyBindings(vm());
</script>
